// üìú –ü—Ä–∞–≤–∏–ª–∞ –¥–Ω—è
const rules = [
  "–ù–µ –æ–ø—Ä–∞–≤–¥—ã–≤–∞–π—Å—è ‚Äî –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî —Å–ª–∞–±–æ—Å—Ç—å.",
  "–ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–µ—Å—É—Ä—Å ‚Äî –æ—Ç—Å–µ–∫–∞–π.",
  "–•–∏—â–Ω–∏–∫ –º–æ–ª—á–∏—Ç —á–∞—â–µ, —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç.",
  "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–æ–±–æ–π ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º.",
  "–ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ ‚Äî –≤–æ–π–Ω–∞ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å—ã.",
  "–ì—Ä—É–±–æ—Å—Ç—å ‚Äî —Ñ–∏–ª—å—Ç—Ä. –ö—Ç–æ —Å–ª–∞–± ‚Äî –æ—Ç–ø–∞–¥—ë—Ç —Å–∞–º.",
  "–°–Ω–∞—á–∞–ª–∞ –¥–æ–º–∏–Ω–∏—Ä—É–π, –ø–æ—Ç–æ–º –¥—Ä—É–∂–∏.",
  "–ï—Å–ª–∏ –Ω–µ –¥–∞–≤—è—Ç –Ω–∞ —Ç–µ–±—è ‚Äî –¥–∞–≤–∏ —Ç—ã.",
  "–õ–æ–∂—å ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å.",
  "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ ‚â† –≤—ã–≥–æ–¥–Ω–æ–µ. –í—ã–±–∏—Ä–∞–π –≤—ã–≥–æ–¥—É."
];

function getRule() {
  const index = Math.floor(Math.random() * rules.length);
  document.getElementById("rule").textContent = rules[index];
}

// üìã –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å
function addTask() {
  const input = document.getElementById("taskInput");
  const value = input.value.trim();
  if (value) {
    const li = document.createElement("li");
    li.textContent = "üîπ " + value;
    document.getElementById("taskList").appendChild(li);
    input.value = "";
    saveLog("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: " + value);
    saveTasks();
  }
}

function saveTasks() {
  const tasks = Array.from(document.querySelectorAll("#taskList li")).map(li => li.textContent);
  localStorage.setItem("tasks", JSON.stringify(tasks));
}

function loadTasks() {
  const data = localStorage.getItem("tasks");
  if (data) {
    JSON.parse(data).forEach(t => {
      const li = document.createElement("li");
      li.textContent = t;
      document.getElementById("taskList").appendChild(li);
    });
  }
}

// ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
function addReminder() {
  const time = document.getElementById("reminderTime").value;
  const text = document.getElementById("reminderText").value.trim();
  if (!time || !text) return;

  const reminder = { time, text };
  const reminders = JSON.parse(localStorage.getItem("reminders") || "[]");
  reminders.push(reminder);
  localStorage.setItem("reminders", JSON.stringify(reminders));

  renderReminders();
  scheduleReminder(reminder);
  saveLog("–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: " + time + " ‚Äî " + text);
  document.getElementById("reminderTime").value = "";
  document.getElementById("reminderText").value = "";
}

function renderReminders() {
  const list = document.getElementById("reminderList");
  list.innerHTML = "";
  const reminders = JSON.parse(localStorage.getItem("reminders") || "[]");
  reminders.forEach((r, i) => {
    const li = document.createElement("li");
    li.textContent = `${r.time} ‚Äî ${r.text}`;
    const btn = document.createElement("button");
    btn.textContent = "‚ùå";
    btn.onclick = () => {
      reminders.splice(i, 1);
      localStorage.setItem("reminders", JSON.stringify(reminders));
      renderReminders();
    };
    li.appendChild(btn);
    list.appendChild(li);
  });
}

function scheduleReminder(reminder) {
  const now = new Date();
  const [hour, minute] = reminder.time.split(":").map(Number);
  const target = new Date();
  target.setHours(hour, minute, 0, 0);
  if (target <= now) target.setDate(now.getDate() + 1);
  const delay = target - now;

  setTimeout(() => {
    alert("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: " + reminder.text);
    scheduleReminder(reminder);
  }, delay);
}

function loadReminders() {
  const reminders = JSON.parse(localStorage.getItem("reminders") || "[]");
  reminders.forEach(scheduleReminder);
  renderReminders();
}

// üë• –û–∫—Ä—É–∂–µ–Ω–∏–µ
function createPersonElement(name, status, tags = []) {
  const li = document.createElement("li");
  li.innerHTML = `${name} ‚Äî <span class="${status}">${status.toUpperCase()}</span>`;

  const meta = document.createElement("small");
  if (tags.length > 0) {
    meta.textContent = " | " + tags.join(", ");
    li.appendChild(meta);
  }

  const btn = document.createElement("button");
  btn.textContent = "‚ùå";
  btn.style.marginLeft = "10px";
  btn.onclick = () => {
    li.remove();
    saveLog("–£–¥–∞–ª—ë–Ω —á–µ–ª–æ–≤–µ–∫: " + name);
    updatePeopleStorage();
  };

  li.appendChild(btn);
  return li;
}

function addPerson() {
  const name = document.getElementById("personName").value.trim();
  const status = document.getElementById("personStatus").value;
  const tags = [];
  if (document.getElementById("tagResource").checked) tags.push("üí∞ –†–µ—Å—É—Ä—Å");
  if (document.getElementById("tagBallast").checked) tags.push("ü™® –ë–∞–ª–ª–∞—Å—Ç");
  if (document.getElementById("tagWeak").checked) tags.push("üß† –°–ª–∞–±—ã–π");
  if (document.getElementById("tagReligious").checked) tags.push("‚úùÔ∏è –†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π");
  if (document.getElementById("tagSmart").checked) tags.push("üß† –£–º–Ω—ã–π");
  if (document.getElementById("tagTricky").checked) tags.push("ü¶ä –•–∏—Ç—Ä—ã–π");

  if (name) {
    const li = createPersonElement(name, status, tags);
    document.getElementById("peopleList").appendChild(li);
    document.getElementById("personName").value = "";
    saveLog("–î–æ–±–∞–≤–ª–µ–Ω —á–µ–ª–æ–≤–µ–∫: " + name + " (" + status + ")");
    updatePeopleStorage();
  }
}

function updatePeopleStorage() {
  const items = Array.from(document.querySelectorAll("#peopleList li")).map(li => li.innerHTML);
  localStorage.setItem("people", JSON.stringify(items));
}

function loadPeople() {
  const people = JSON.parse(localStorage.getItem("people") || "[]");
  people.forEach(p => {
    const temp = document.createElement("div");
    temp.innerHTML = p;
    const name = temp.textContent.split("‚Äî")[0].trim();
    const statusMatch = p.match(/class="(.*?)"/);
    const status = statusMatch ? statusMatch[1] : "yellow";

    const tags = [];
    if (p.includes("üí∞")) tags.push("üí∞ –†–µ—Å—É—Ä—Å");
    if (p.includes("ü™®")) tags.push("ü™® –ë–∞–ª–ª–∞—Å—Ç");
    if (p.includes("üß† –°–ª–∞–±—ã–π")) tags.push("üß† –°–ª–∞–±—ã–π");
    if (p.includes("‚úùÔ∏è")) tags.push("‚úùÔ∏è –†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π");
    if (p.includes("üß† –£–º–Ω—ã–π")) tags.push("üß† –£–º–Ω—ã–π");
    if (p.includes("ü¶ä")) tags.push("ü¶ä –•–∏—Ç—Ä—ã–π");

    const li = createPersonElement(name, status, tags);
    document.getElementById("peopleList").appendChild(li);
  });
}

// üí∞ –§–∏–Ω–∞–Ω—Å—ã
let totalIncome = 0;
let totalExpense = 0;

function addFinance() {
  const income = parseFloat(document.getElementById("income").value) || 0;
  const expense = parseFloat(document.getElementById("expense").value) || 0;

  totalIncome += income;
  totalExpense += expense;

  const balance = totalIncome - totalExpense;
  const percent = totalExpense === 0 ? 100 : Math.round((totalIncome / totalExpense) * 100);

  document.getElementById("financeStats").innerHTML = `
    üíµ –î–æ—Ö–æ–¥: ${totalIncome} <br>
    üí∏ –†–∞—Å—Ö–æ–¥: ${totalExpense} <br>
    üìä –ë–∞–ª–∞–Ω—Å: <span style="color:${balance >= 0 ? '#0f0' : '#f00'}">${balance}</span><br>
    ‚öñÔ∏è –î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥: <span style="color:${
      percent > 100 ? '#0f0' : percent < 100 ? '#f00' : '#ff0'
    }">${percent}%</span>
  `;

  saveLog(`–§–∏–Ω–∞–Ω—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: +${income}, -${expense}`);
  document.getElementById("income").value = "";
  document.getElementById("expense").value = "";
  saveFinance();
}

function saveFinance() {
  localStorage.setItem("finance", JSON.stringify({ income: totalIncome, expense: totalExpense }));
}

function loadFinance() {
  const data = localStorage.getItem("finance");
  if (data) {
    const { income, expense } = JSON.parse(data);
    totalIncome = income;
    totalExpense = expense;
    addFinance(); // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å
  }
}

// üèãÔ∏è –§–∏–∑–æ
function addWorkout() {
  const exercise = document.getElementById("exercise").value.trim();
  const amount = document.getElementById("amount").value.trim();

  if (exercise && amount) {
    const li = document.createElement("li");
    li.textContent = `üèÉ ${exercise}: ${amount}`;
    const del = document.createElement("button");
    del.textContent = "‚ùå";
    del.onclick = () => {
      li.remove();
      saveLog("–£–¥–∞–ª–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: " + li.textContent);
      saveWorkouts();
      updateFitChart();
    };
    li.appendChild(del);
    document.getElementById("fitLog").appendChild(li);
    saveLog(`–§–∏–∑–æ: ${exercise} ‚Äî ${amount}`);
    document.getElementById("exercise").value = "";
    document.getElementById("amount").value = "";
    saveWorkouts();
    updateFitChart();
  }
}

function saveWorkouts() {
  const entries = Array.from(document.querySelectorAll("#fitLog li")).map(li => li.textContent.replace("‚ùå", "").trim());
  localStorage.setItem("fitLog", JSON.stringify(entries));
}

function loadWorkouts() {
  const data = localStorage.getItem("fitLog");
  if (data) {
    const entries = JSON.parse(data);
    entries.forEach(entry => {
      const li = document.createElement("li");
      li.textContent = entry;
      const btn = document.createElement("button");
      btn.textContent = "‚ùå";
      btn.onclick = () => {
        li.remove();
        saveWorkouts();
        updateFitChart();
      };
      li.appendChild(btn);
      document.getElementById("fitLog").appendChild(li);
    });
  }
  updateFitChart();
}

// üß† –ê—Ä—Ö–µ—Ç–∏–ø
const testQuestions = [
  {
    q: "–ö–∞–∫ —Ç—ã —Ä–µ—à–∞–µ—à—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã?",
    a: { –•–∏—â–Ω–∏–∫: 2, –°—Ç—Ä–∞—Ç–µ–≥: 1 }
  },
  {
    q: "–ß—Ç–æ –≤–∞–∂–Ω–µ–µ: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –ø–æ—Ä—è–¥–æ–∫?",
    a: { –°—Ç—Ä–∞—Ç–µ–≥: 2, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: 1 }
  },
  {
    q: "–¢—ã –º–æ–ª—á–∏—à—å –∏–ª–∏ –ø—Ä–æ–≤–æ—Ü–∏—Ä—É–µ—à—å?",
    a: { –•–∏—â–Ω–∏–∫: 1, –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä: 2 }
  },
  {
    q: "–¢—ã –±–æ–ª—å—à–µ —Å–ª—É—à–∞–µ—à—å –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—à—å?",
    a: { –û—Ä–∞–∫—É–ª: 2, –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä: 1 }
  },
  {
    q: "–¢—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –æ–¥–∏–Ω?",
    a: { –•–∏—â–Ω–∏–∫: 1, –°—Ç—Ä–∞—Ç–µ–≥: 1, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: 1 }
  }
];

let currentQuestion = 0;
let archetypeScores = {
  –•–∏—â–Ω–∏–∫: 0,
  –°—Ç—Ä–∞—Ç–µ–≥: 0,
  –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä: 0,
  –û—Ä–∞–∫—É–ª: 0,
  –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: 0
};

function startTest() {
  currentQuestion = 0;
  archetypeScores = { –•–∏—â–Ω–∏–∫: 0, –°—Ç—Ä–∞—Ç–µ–≥: 0, –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä: 0, –û—Ä–∞–∫—É–ª: 0, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: 0 };
  showQuestion();
}

function showQuestion() {
  const quiz = document.getElementById("quiz");
  const result = document.getElementById("result");
  result.innerHTML = "";

  if (currentQuestion >= testQuestions.length) return showResult();

  const q = testQuestions[currentQuestion];
  quiz.innerHTML = `<p>${q.q}</p>`;
  Object.entries(q.a).forEach(([type, score]) => {
    const btn = document.createElement("button");
    btn.textContent = type;
    btn.onclick = () => {
      archetypeScores[type] += score;
      currentQuestion++;
      showQuestion();
    };
    quiz.appendChild(btn);
  });
}

function showResult() {
  const quiz = document.getElementById("quiz");
  quiz.innerHTML = "";
  const max = Object.entries(archetypeScores).sort((a, b) => b[1] - a[1])[0];
  const result = document.getElementById("result");
  result.innerHTML = `<h3>–¢—ã ‚Äî ${max[0]}</h3><p>${describeArchetype(max[0])}</p>`;
}

function describeArchetype(type) {
  switch (type) {
    case "–•–∏—â–Ω–∏–∫":
      return "–ê—Ç–∞–∫—É–π –ø–µ—Ä–≤—ã–º. –¢—ã ‚Äî —Å–∏–ª–∞. –°–æ–≤–µ—Ç: –Ω–µ –≤—Å—Ç—É–ø–∞–π –≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π –¥–∞–≤–ª–µ–Ω–∏–µ, –∏–∑–±–µ–≥–∞–π –ø–æ–¥—á–∏–Ω–µ–Ω–∏—è.";
    case "–°—Ç—Ä–∞—Ç–µ–≥":
      return "–¢—ã ‚Äî –º–æ–∑–≥ –∏–≥—Ä—ã. –°–æ–≤–µ—Ç: —Å—Ç—Ä–æ–π —Å—Ö–µ–º—ã, —É–ø—Ä–∞–≤–ª—è–π —á—É–∂–∏–º–∏ —Ä—É–∫–∞–º–∏, –Ω–µ —Ç—Ä–∞—Ç—å —Å–µ–±—è –ª–∏—á–Ω–æ.";
    case "–ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä":
      return "–¢—ã ‚Äî –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä —Ö–∞–æ—Å–∞. –°–æ–≤–µ—Ç: –Ω–µ –±–µ—Ä–∏ –Ω–∞ —Å–µ–±—è, –±—Ä–æ—Å–∞–π –∏—Å–∫—Ä—É –∏ –æ—Ç—Å—Ç—É–ø–∞–π.";
    case "–û—Ä–∞–∫—É–ª":
      return "–¢—ã ‚Äî –∑–Ω–∞–Ω–∏–µ. –°–æ–≤–µ—Ç: –º–æ–ª—á–∏ –±–æ–ª—å—à–µ, —á–µ–º –≥–æ–≤–æ—Ä–∏. –ü—É—Å—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–æ—è—Ç –¥–æ–≥–∞–¥–∫–∏.";
    case "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
      return "–¢—ã ‚Äî —Å–∏—Å—Ç–µ–º–∞. –°–æ–≤–µ—Ç: –æ–∫—Ä—É–∂–∞–π —Å–µ–±—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞–º–∏, –∞ —Å–∞–º –±—É–¥—å –Ω–µ–∑—ã–±–ª–µ–º.";
    default:
      return "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –≤–Ω–µ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤.";
  }
}

// üó∫Ô∏è –ö–∞—Ä—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
function addGoal() {
  const text = document.getElementById("goalInput").value.trim();
  const type = document.getElementById("goalType").value;
  if (!text) return;

  const li = document.createElement("li");
  li.textContent = `üéØ ${text} [${type}]`;
  li.setAttribute("data-status", "plan");
  li.onclick = () => cycleGoalStatus(li);

  const del = document.createElement("button");
  del.textContent = "‚ùå";
  del.onclick = (e) => {
    e.stopPropagation();
    li.remove();
    saveStrategy();
    saveLog("–¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞: " + text);
  };

  li.appendChild(del);
  document.getElementById("strategyList").appendChild(li);
  saveLog("–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ü–µ–ª—å: " + text + " [" + type + "]");
  document.getElementById("goalInput").value = "";
  saveStrategy();
}

function cycleGoalStatus(li) {
  const statuses = ["plan", "process", "done", "fail"];
  let current = li.getAttribute("data-status") || "plan";
  let index = statuses.indexOf(current);
  let next = statuses[(index + 1) % statuses.length];
  li.setAttribute("data-status", next);
  li.style.opacity = next === "fail" ? 0.5 : 1;
  li.style.textDecoration = next === "done" ? "line-through" : "none";
  saveLog(`–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${li.textContent} ‚Üí ${next}`);
  saveStrategy();
}

function saveStrategy() {
  localStorage.setItem("strategy", document.getElementById("strategyList").innerHTML);
}

function loadStrategy() {
  const data = localStorage.getItem("strategy");
  if (data) document.getElementById("strategyList").innerHTML = data;
}

// üìö –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π
function toggleLog() {
  const list = document.getElementById("logList");
  list.style.display = list.style.display === "none" ? "block" : "none";
  renderLog();
  updateActivityChart();
}

function renderLog() {
  const logList = document.getElementById("logList");
  logList.innerHTML = "";
  const log = JSON.parse(localStorage.getItem("activityLog") || "[]").reverse();
  log.forEach(item => {
    const li = document.createElement("li");
    li.textContent = `${item.time} ‚Äî ${item.entry}`;
    logList.appendChild(li);
  });
}

function updateActivityChart() {
  const raw = JSON.parse(localStorage.getItem("activityLog") || "[]");
  const map = {};

  raw.forEach(item => {
    const date = item.time.split(",")[0];
    map[date] = (map[date] || 0) + 1;
  });

  const labels = Object.keys(map);
  const values = Object.values(map);

  if (window.activityChart) window.activityChart.destroy();

  const ctx = document.getElementById("activityChart").getContext("2d");
  window.activityChart = new Chart(ctx, {
    type: "line",
    data: {
      labels,
      datasets: [{
        label: "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–¥–µ–π—Å—Ç–≤–∏–π –≤ –¥–µ–Ω—å)",
        data: values,
        fill: false,
        borderColor: "#0f0",
        tension: 0.2
      }]
    },
    options: {
      scales: {
        y: { beginAtZero: true, ticks: { color: "#0f0" }, grid: { color: "#333" } },
        x: { ticks: { color: "#0f0" }, grid: { color: "#333" } }
      },
      plugins: { legend: { display: false } }
    }
  });
}

if ("serviceWorker" in navigator) {
  navigator.serviceWorker.register("sw.js")
    .then(() => console.log("‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"))
    .catch(err => console.error("Service Worker –æ—à–∏–±–∫–∞:", err));
}

if ("serviceWorker" in navigator) {
  navigator.serviceWorker.register("sw.js")
    .then(() => console.log("‚úÖ Service Worker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"))
    .catch(err => console.error("–û—à–∏–±–∫–∞ SW:", err));
}

// üîÅ –°—Ç–∞—Ä—Ç
window.addEventListener("DOMContentLoaded", () => {
  getRule();
  loadTasks();
  loadPeople();
  loadWorkouts();
  loadFinance();
  loadReminders();
  loadStrategy();
});