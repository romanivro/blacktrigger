// ===== üìú –ü—Ä–∞–≤–∏–ª–∞ –¥–Ω—è =====
const rules = [
  "–ù–µ –æ–ø—Ä–∞–≤–¥—ã–≤–∞–π—Å—è ‚Äî –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî —Å–ª–∞–±–æ—Å—Ç—å.",
  "–ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–µ—Å—É—Ä—Å ‚Äî –æ—Ç—Å–µ–∫–∞–π.",
  "–•–∏—â–Ω–∏–∫ –º–æ–ª—á–∏—Ç —á–∞—â–µ, —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç.",
  "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–æ–±–æ–π ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º.",
  "–ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ ‚Äî –≤–æ–π–Ω–∞ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å—ã.",
  "–ì—Ä—É–±–æ—Å—Ç—å ‚Äî —Ñ–∏–ª—å—Ç—Ä. –ö—Ç–æ —Å–ª–∞–± ‚Äî –æ—Ç–ø–∞–¥—ë—Ç —Å–∞–º.",
  "–°–Ω–∞—á–∞–ª–∞ –¥–æ–º–∏–Ω–∏—Ä—É–π, –ø–æ—Ç–æ–º –¥—Ä—É–∂–∏.",
  "–ï—Å–ª–∏ –Ω–µ –¥–∞–≤—è—Ç –Ω–∞ —Ç–µ–±—è ‚Äî –¥–∞–≤–∏ —Ç—ã.",
  "–õ–æ–∂—å ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å.",
  "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ ‚â† –≤—ã–≥–æ–¥–Ω–æ–µ. –í—ã–±–∏—Ä–∞–π –≤—ã–≥–æ–¥—É."
];

function getRule() {
  const index = Math.floor(Math.random() * rules.length);
  document.getElementById("rule").textContent = rules[index];
}

// ===== üß† –õ–æ–≥ =====
function saveLog(entry) {
  const log = JSON.parse(localStorage.getItem("activityLog") || "[]");
  log.push({ time: new Date().toLocaleString(), entry });
  localStorage.setItem("activityLog", JSON.stringify(log));
}

function toggleLog() {
  const logList = document.getElementById("logList");
  if (!logList) return;
  logList.style.display = logList.style.display === "none" ? "block" : "none";
  renderLog();
  updateActivityChart();
}

function renderLog() {
  const logList = document.getElementById("logList");
  const log = JSON.parse(localStorage.getItem("activityLog") || "[]").reverse();
  logList.innerHTML = "";
  log.forEach(item => {
    const li = document.createElement("li");
    li.textContent = `${item.time} ‚Äî ${item.entry}`;
    logList.appendChild(li);
  });
}

function updateActivityChart() {
  const raw = JSON.parse(localStorage.getItem("activityLog") || "[]");
  const map = {};
  raw.forEach(item => {
    const date = item.time.split(",")[0];
    map[date] = (map[date] || 0) + 1;
  });

  const labels = Object.keys(map);
  const values = Object.values(map);

  if (window.activityChart) window.activityChart.destroy();

  const ctx = document.getElementById("activityChart").getContext("2d");
  window.activityChart = new Chart(ctx, {
    type: "line",
    data: {
      labels,
      datasets: [{ label: "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", data: values, borderColor: "#0f0", tension: 0.2 }]
    },
    options: {
      plugins: { legend: { display: false } },
      scales: {
        x: { ticks: { color: "#0f0" }, grid: { color: "#333" } },
        y: { beginAtZero: true, ticks: { color: "#0f0" }, grid: { color: "#333" } }
      }
    }
  });
}

// ===== üìã –ó–∞–¥–∞—á–∏ =====
function addTask() {
  const input = document.getElementById("taskInput");
  const value = input.value.trim();
  if (!value) return;

  const li = document.createElement("li");
  li.textContent = value;

  const btn = document.createElement("button");
  btn.textContent = "‚ùå";
  btn.onclick = () => {
    li.remove();
    saveLog("–£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: " + value);
    saveTasks();
  };
  li.appendChild(btn);
  document.getElementById("taskList").appendChild(li);

  input.value = "";
  saveLog("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: " + value);
  saveTasks();
}

function saveTasks() {
  const tasks = Array.from(document.querySelectorAll("#taskList li")).map(li => li.textContent.replace("‚ùå", "").trim());
  localStorage.setItem("tasks", JSON.stringify(tasks));
}

function loadTasks() {
  const data = JSON.parse(localStorage.getItem("tasks") || "[]");
  data.forEach(task => {
    const li = document.createElement("li");
    li.textContent = task;

    const btn = document.createElement("button");
    btn.textContent = "‚ùå";
    btn.onclick = () => {
      li.remove();
      saveLog("–£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: " + task);
      saveTasks();
    };
    li.appendChild(btn);
    document.getElementById("taskList").appendChild(li);
  });
}

// ===== ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è =====
function addReminder() {
  const time = document.getElementById("reminderTime").value;
  const text = document.getElementById("reminderText").value.trim();
  if (!time || !text) return;

  const reminder = { time, text };
  const reminders = JSON.parse(localStorage.getItem("reminders") || "[]");
  reminders.push(reminder);
  localStorage.setItem("reminders", JSON.stringify(reminders));

  renderReminders();
  scheduleReminder(reminder);
  saveLog("–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: " + text);
  document.getElementById("reminderTime").value = "";
  document.getElementById("reminderText").value = "";
}

function renderReminders() {
  const list = document.getElementById("reminderList");
  const reminders = JSON.parse(localStorage.getItem("reminders") || "[]");
  list.innerHTML = "";
  reminders.forEach((r, i) => {
    const li = document.createElement("li");
    li.textContent = `${r.time} ‚Äî ${r.text}`;
    const btn = document.createElement("button");
    btn.textContent = "‚ùå";
    btn.onclick = () => {
      reminders.splice(i, 1);
      localStorage.setItem("reminders", JSON.stringify(reminders));
      renderReminders();
    };
    li.appendChild(btn);
    list.appendChild(li);
  });
}

function scheduleReminder(reminder) {
  const now = new Date();
  const [h, m] = reminder.time.split(":").map(Number);
  const target = new Date();
  target.setHours(h, m, 0, 0);
  if (target < now) target.setDate(target.getDate() + 1);
  const delay = target - now;

  setTimeout(() => {
    alert("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: " + reminder.text);
    scheduleReminder(reminder); // –ø–æ–≤—Ç–æ—Ä –∑–∞–≤—Ç—Ä–∞
  }, delay);
}

function loadReminders() {
  const reminders = JSON.parse(localStorage.getItem("reminders") || "[]");
  reminders.forEach(scheduleReminder);
  renderReminders();
}

// ===== üë• –û–∫—Ä—É–∂–µ–Ω–∏–µ =====
function createPersonElement(name, status) {
  const li = document.createElement("li");
  li.innerHTML = `${name} ‚Äî <span class="${status}">${status.toUpperCase()}</span>`;

  const btn = document.createElement("button");
  btn.textContent = "‚ùå";
  btn.onclick = () => {
    li.remove();
    saveLog("–£–¥–∞–ª—ë–Ω —á–µ–ª–æ–≤–µ–∫: " + name);
    savePeople();
  };

  li.appendChild(btn);
  return li;
}

function addPerson() {
  const name = document.getElementById("personName").value.trim();
  const status = document.getElementById("personStatus").value;
  if (!name) return;

  const li = createPersonElement(name, status);
  document.getElementById("peopleList").appendChild(li);
  saveLog("–î–æ–±–∞–≤–ª–µ–Ω —á–µ–ª–æ–≤–µ–∫: " + name + " (" + status + ")");
  document.getElementById("personName").value = "";
  savePeople();
}

function savePeople() {
  const items = Array.from(document.querySelectorAll("#peopleList li")).map(li => li.innerHTML);
  localStorage.setItem("people", JSON.stringify(items));
}

function loadPeople() {
  const people = JSON.parse(localStorage.getItem("people") || "[]");
  people.forEach(p => {
    const temp = document.createElement("div");
    temp.innerHTML = p;
    const name = temp.textContent.split("‚Äî")[0].trim();
    const statusMatch = p.match(/class="(.*?)"/);
    const status = statusMatch ? statusMatch[1] : "yellow";
    const li = createPersonElement(name, status);
    document.getElementById("peopleList").appendChild(li);
  });
}

// ===== üèãÔ∏è –§–∏–∑–æ =====
function addWorkout() {
  const type = document.getElementById("exercise").value.trim();
  const amount = document.getElementById("amount").value.trim();
  if (!type || !amount) return;

  const li = document.createElement("li");
  li.textContent = `üèÉ ${type}: ${amount}`;

  const btn = document.createElement("button");
  btn.textContent = "‚ùå";
  btn.onclick = () => {
    li.remove();
    saveLog(`–£–¥–∞–ª–µ–Ω–æ: ${type} ‚Äî ${amount}`);
    saveWorkouts();
    updateFitChart();
  };
  li.appendChild(btn);

  document.getElementById("fitLog").appendChild(li);
  saveLog(`–î–æ–±–∞–≤–ª–µ–Ω–æ: ${type} ‚Äî ${amount}`);
  saveWorkouts();
  updateFitChart();
}

function saveWorkouts() {
  const list = Array.from(document.querySelectorAll("#fitLog li")).map(li => li.textContent.replace("‚ùå", "").trim());
  localStorage.setItem("fitLog", JSON.stringify(list));
}

function loadWorkouts() {
  const data = JSON.parse(localStorage.getItem("fitLog") || "[]");
  data.forEach(entry => {
    const li = document.createElement("li");
    li.textContent = entry;

    const btn = document.createElement("button");
    btn.textContent = "‚ùå";
    btn.onclick = () => {
      li.remove();
      saveLog(`–£–¥–∞–ª–µ–Ω–æ: ${entry}`);
      saveWorkouts();
      updateFitChart();
    };
    li.appendChild(btn);

    document.getElementById("fitLog").appendChild(li);
  });
  updateFitChart();
}

function updateFitChart() {
  const dataMap = {};
  const items = Array.from(document.querySelectorAll("#fitLog li"));
  items.forEach(item => {
    const [type, value] = item.textContent.replace("üèÉ ", "").split(":").map(s => s.trim());
    const num = parseFloat(value);
    if (!isNaN(num)) dataMap[type] = (dataMap[type] || 0) + num;
  });

  const ctx = document.getElementById("fitChart").getContext("2d");
  if (window.fitChart) window.fitChart.destroy();

  window.fitChart = new Chart(ctx, {
    type: "bar",
    data: {
      labels: Object.keys(dataMap),
      datasets: [{
        data: Object.values(dataMap),
        backgroundColor: "#0f0"
      }]
    },
    options: {
      plugins: { legend: { display: false } },
      scales: {
        x: { ticks: { color: "#0f0" }, grid: { color: "#333" } },
        y: { beginAtZero: true, ticks: { color: "#0f0" }, grid: { color: "#333" } }
      }
    }
  });
}

// ===== –ê—Ä—Ö–µ—Ç–∏–ø =====
const questions = [
  { q: "–ö–∞–∫ —Ç—ã —Ä–µ—à–∞–µ—à—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã?", a: { –•–∏—â–Ω–∏–∫: 2, –°—Ç—Ä–∞—Ç–µ–≥: 1 } },
  { q: "–ß—Ç–æ –≤–∞–∂–Ω–µ–µ: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –ø–æ—Ä—è–¥–æ–∫?", a: { –°—Ç—Ä–∞—Ç–µ–≥: 2, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: 1 } },
  { q: "–¢—ã –º–æ–ª—á–∏—à—å –∏–ª–∏ –ø—Ä–æ–≤–æ—Ü–∏—Ä—É–µ—à—å?", a: { –•–∏—â–Ω–∏–∫: 1, –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä: 2 } },
  { q: "–¢—ã –±–æ–ª—å—à–µ —Å–ª—É—à–∞–µ—à—å –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—à—å?", a: { –û—Ä–∞–∫—É–ª: 2, –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä: 1 } },
  { q: "–¢—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –æ–¥–∏–Ω?", a: { –•–∏—â–Ω–∏–∫: 1, –°—Ç—Ä–∞—Ç–µ–≥: 1, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: 1 } }
];

let current = 0;
let score = { –•–∏—â–Ω–∏–∫: 0, –°—Ç—Ä–∞—Ç–µ–≥: 0, –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä: 0, –û—Ä–∞–∫—É–ª: 0, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: 0 };

function startTest() {
  current = 0;
  score = { –•–∏—â–Ω–∏–∫: 0, –°—Ç—Ä–∞—Ç–µ–≥: 0, –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä: 0, –û—Ä–∞–∫—É–ª: 0, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: 0 };
  showQuestion();
}

function showQuestion() {
  const q = questions[current];
  const quiz = document.getElementById("quiz");
  const result = document.getElementById("result");
  result.innerHTML = "";
  quiz.innerHTML = `<p>${q.q}</p>`;
  Object.entries(q.a).forEach(([type, val]) => {
    const btn = document.createElement("button");
    btn.textContent = type;
    btn.onclick = () => {
      score[type] += val;
      current++;
      current >= questions.length ? showResult() : showQuestion();
    };
    quiz.appendChild(btn);
  });
}

function showResult() {
  const max = Object.entries(score).sort((a, b) => b[1] - a[1])[0][0];
  const result = document.getElementById("result");
  result.innerHTML = `<h3>–¢—ã ‚Äî ${max}</h3><p>${describeArchetype(max)}</p>`;
  document.getElementById("quiz").innerHTML = "";
}

function describeArchetype(type) {
  switch (type) {
    case "–•–∏—â–Ω–∏–∫": return "–û–ø–∞—Å–Ω—ã–π, –º–æ–ª—á–∞–ª–∏–≤—ã–π, –ø—Ä—è–º–æ–π.";
    case "–°—Ç—Ä–∞—Ç–µ–≥": return "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç, –ø—Ä–æ—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —É–ø—Ä–∞–≤–ª—è–µ—Ç.";
    case "–ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä": return "–ò–≥—Ä–∞–µ—Ç –Ω–∞ —Å–ª–∞–±–æ—Å—Ç—è—Ö, –ø—Ä–æ–≤–æ—Ü–∏—Ä—É–µ—Ç —Ö–∞–æ—Å.";
    case "–û—Ä–∞–∫—É–ª": return "–í–∏–¥–∏—Ç —Å—É—Ç—å, –¥–µ–π—Å—Ç–≤—É–µ—Ç –∏–∑ —Ç–µ–Ω–∏.";
    case "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": return "–°—Ç–∞–±–∏–ª–µ–Ω, –Ω–µ —Å–±–∏–≤–∞–µ—Ç—Å—è, –∑–∞–≤–µ—Ä—à–∞–µ—Ç.";
    default: return "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω.";
  }
}

// ===== –ó–∞–≥—Ä—É–∑–∫–∞ =====
window.addEventListener("DOMContentLoaded", () => {
  getRule();
  loadTasks();
  loadReminders();
  loadPeople();
  loadWorkouts();
  renderLog();
});