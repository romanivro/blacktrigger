// === üìú –ü—Ä–∞–≤–∏–ª–æ –¥–Ω—è ===
const rules = [
  "–ù–µ –æ–ø—Ä–∞–≤–¥—ã–≤–∞–π—Å—è ‚Äî –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî —Å–ª–∞–±–æ—Å—Ç—å.",
  "–ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–µ—Å—É—Ä—Å ‚Äî –æ—Ç—Å–µ–∫–∞–π.",
  "–•–∏—â–Ω–∏–∫ –º–æ–ª—á–∏—Ç —á–∞—â–µ, —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç.",
  "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–æ–±–æ–π ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º.",
  "–ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ ‚Äî –≤–æ–π–Ω–∞ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å—ã.",
  "–ì—Ä—É–±–æ—Å—Ç—å ‚Äî —Ñ–∏–ª—å—Ç—Ä. –ö—Ç–æ —Å–ª–∞–± ‚Äî –æ—Ç–ø–∞–¥—ë—Ç —Å–∞–º.",
  "–°–Ω–∞—á–∞–ª–∞ –¥–æ–º–∏–Ω–∏—Ä—É–π, –ø–æ—Ç–æ–º –¥—Ä—É–∂–∏.",
  "–ï—Å–ª–∏ –Ω–µ –¥–∞–≤—è—Ç –Ω–∞ —Ç–µ–±—è ‚Äî –¥–∞–≤–∏ —Ç—ã.",
  "–õ–æ–∂—å ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å.",
  "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ ‚â† –≤—ã–≥–æ–¥–Ω–æ–µ. –í—ã–±–∏—Ä–∞–π –≤—ã–≥–æ–¥—É."
];

function getRule() {
  const index = Math.floor(Math.random() * rules.length);
  document.getElementById("rule").textContent = rules[index];
}

// === üß† –õ–æ–≥ ===
function saveLog(entry) {
  const now = new Date().toLocaleString();
  const log = JSON.parse(localStorage.getItem("log") || "[]");
  log.push({ time: now, entry });
  localStorage.setItem("log", JSON.stringify(log));
  renderLog();
}

function renderLog() {
  const logList = document.getElementById("logList");
  if (!logList) return;
  logList.innerHTML = "";
  const log = JSON.parse(localStorage.getItem("log") || "[]").reverse();
  log.forEach(item => {
    const li = document.createElement("li");
    li.textContent = `${item.time} ‚Äî ${item.entry}`;
    logList.appendChild(li);
  });
}

function toggleLog() {
  const log = document.getElementById("logList");
  if (log.style.display === "none") {
    log.style.display = "block";
    renderLog();
  } else {
    log.style.display = "none";
  }
}

// === üìã –ó–∞–¥–∞—á–∏ ===
function addTask() {
  const input = document.getElementById("taskInput");
  const value = input.value.trim();
  if (value) {
    const li = document.createElement("li");
    li.textContent = "üîπ " + value;
    li.onclick = () => {
      li.remove();
      saveTaskStorage();
    };
    document.getElementById("taskList").appendChild(li);
    input.value = "";
    saveLog("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: " + value);
    saveTaskStorage();
  }
}

function saveTaskStorage() {
  const items = Array.from(document.querySelectorAll("#taskList li")).map(li => li.textContent);
  localStorage.setItem("tasks", JSON.stringify(items));
}

function loadTasks() {
  const data = JSON.parse(localStorage.getItem("tasks") || "[]");
  data.forEach(t => {
    const li = document.createElement("li");
    li.textContent = t;
    li.onclick = () => {
      li.remove();
      saveTaskStorage();
    };
    document.getElementById("taskList").appendChild(li);
  });
}

// === ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ===
function addReminder() {
  const time = document.getElementById("reminderTime").value;
  const text = document.getElementById("reminderText").value.trim();
  if (!time || !text) return;

  const reminder = { time, text };
  const list = JSON.parse(localStorage.getItem("reminders") || "[]");
  list.push(reminder);
  localStorage.setItem("reminders", JSON.stringify(list));
  renderReminders();
  scheduleReminder(reminder);
  saveLog("–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: " + time + " ‚Äî " + text);
}

function renderReminders() {
  const list = document.getElementById("reminderList");
  list.innerHTML = "";
  const reminders = JSON.parse(localStorage.getItem("reminders") || "[]");
  reminders.forEach((r, i) => {
    const li = document.createElement("li");
    li.textContent = `${r.time} ‚Äî ${r.text}`;
    const btn = document.createElement("button");
    btn.textContent = "‚ùå";
    btn.onclick = () => {
      reminders.splice(i, 1);
      localStorage.setItem("reminders", JSON.stringify(reminders));
      renderReminders();
    };
    li.appendChild(btn);
    list.appendChild(li);
  });
}

function scheduleReminder(reminder) {
  const now = new Date();
  const [hour, minute] = reminder.time.split(":").map(Number);
  const target = new Date();
  target.setHours(hour, minute, 0, 0);
  if (target <= now) target.setDate(now.getDate() + 1);
  const delay = target - now;

  setTimeout(() => {
    alert("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: " + reminder.text);
    scheduleReminder(reminder); // –ø–æ–≤—Ç–æ—Ä
  }, delay);
}

function loadReminders() {
  const reminders = JSON.parse(localStorage.getItem("reminders") || "[]");
  reminders.forEach(scheduleReminder);
  renderReminders();
}

// === üë• –û–∫—Ä—É–∂–µ–Ω–∏–µ ===
function addPerson() {
  const name = document.getElementById("personName").value.trim();
  const status = document.getElementById("personStatus").value;
  if (!name) return;

  const li = document.createElement("li");
  li.innerHTML = `${name} ‚Äî <span class="${status}">${status.toUpperCase()}</span>`;
  const btn = document.createElement("button");
  btn.textContent = "‚ùå";
  btn.style.marginLeft = "10px";
  btn.onclick = () => {
    li.remove();
    updatePeopleStorage();
    saveLog("–£–¥–∞–ª—ë–Ω: " + name);
  };
  li.appendChild(btn);

  document.getElementById("peopleList").appendChild(li);
  document.getElementById("personName").value = "";
  updatePeopleStorage();
  saveLog("–î–æ–±–∞–≤–ª–µ–Ω: " + name + " (" + status + ")");
}

function updatePeopleStorage() {
  const items = Array.from(document.querySelectorAll("#peopleList li")).map(li => li.innerHTML);
  localStorage.setItem("people", JSON.stringify(items));
}

function loadPeople() {
  const data = JSON.parse(localStorage.getItem("people") || "[]");
  data.forEach(p => {
    const li = document.createElement("li");
    li.innerHTML = p;
    const btn = document.createElement("button");
    btn.textContent = "‚ùå";
    btn.style.marginLeft = "10px";
    btn.onclick = () => {
      li.remove();
      updatePeopleStorage();
    };
    li.appendChild(btn);
    document.getElementById("peopleList").appendChild(li);
  });
}

// === üß† –ê—Ä—Ö–µ—Ç–∏–ø ===
const testQuestions = [
  { q: "–ö–∞–∫ —Ç—ã —Ä–µ—à–∞–µ—à—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã?", a: { –•–∏—â–Ω–∏–∫: 2, –°—Ç—Ä–∞—Ç–µ–≥: 1 } },
  { q: "–ß—Ç–æ –≤–∞–∂–Ω–µ–µ: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –ø–æ—Ä—è–¥–æ–∫?", a: { –°—Ç—Ä–∞—Ç–µ–≥: 2, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: 1 } },
  { q: "–¢—ã –º–æ–ª—á–∏—à—å –∏–ª–∏ –ø—Ä–æ–≤–æ—Ü–∏—Ä—É–µ—à—å?", a: { –•–∏—â–Ω–∏–∫: 1, –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä: 2 } },
  { q: "–¢—ã –±–æ–ª—å—à–µ —Å–ª—É—à–∞–µ—à—å –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—à—å?", a: { –û—Ä–∞–∫—É–ª: 2, –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä: 1 } },
  { q: "–¢—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –æ–¥–∏–Ω?", a: { –•–∏—â–Ω–∏–∫: 1, –°—Ç—Ä–∞—Ç–µ–≥: 1, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: 1 } }
];

let currentQuestion = 0;
let archetypeScores = {};

function startTest() {
  currentQuestion = 0;
  archetypeScores = { –•–∏—â–Ω–∏–∫: 0, –°—Ç—Ä–∞—Ç–µ–≥: 0, –ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä: 0, –û—Ä–∞–∫—É–ª: 0, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: 0 };
  showQuestion();
}

function showQuestion() {
  const quiz = document.getElementById("quiz");
  const result = document.getElementById("result");
  result.innerHTML = "";

  if (currentQuestion >= testQuestions.length) return showResult();

  const q = testQuestions[currentQuestion];
  quiz.innerHTML = `<p>${q.q}</p>`;
  Object.entries(q.a).forEach(([type, score]) => {
    const btn = document.createElement("button");
    btn.textContent = type;
    btn.onclick = () => {
      archetypeScores[type] += score;
      currentQuestion++;
      showQuestion();
    };
    quiz.appendChild(btn);
  });
}

function showResult() {
  const quiz = document.getElementById("quiz");
  quiz.innerHTML = "";
  const max = Object.entries(archetypeScores).sort((a, b) => b[1] - a[1])[0];
  const result = document.getElementById("result");
  result.innerHTML = `<h3>–¢—ã ‚Äî ${max[0]}</h3><p>${describeArchetype(max[0])}</p>`;
}

function describeArchetype(type) {
  switch (type) {
    case "–•–∏—â–Ω–∏–∫": return "–ê—Ç–∞–∫—É—é—â–∏–π, —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π, –æ–ø–∞—Å–Ω—ã–π. –î–µ–π—Å—Ç–≤—É–µ—Ç –±—ã—Å—Ç—Ä–æ, —Ä–µ–¥–∫–æ –æ–±—ä—è—Å–Ω—è–µ—Ç.";
    case "–°—Ç—Ä–∞—Ç–µ–≥": return "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç, –ø—Ä–æ—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —É–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏. –ù–µ —Ç—Ä–∞—Ç–∏—Ç —Å–µ–±—è.";
    case "–ü—Ä–æ–≤–æ–∫–∞—Ç–æ—Ä": return "–í–∑—Ä—ã–≤–∞–µ—Ç —ç–º–æ—Ü–∏–∏, –≤–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ö–∞–æ—Å, –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–∏–Ω–∞–º–∏–∫—É –æ–∫—Ä—É–∂–µ–Ω–∏—è.";
    case "–û—Ä–∞–∫—É–ª": return "–í–∏–¥–∏—Ç –≥–ª—É–±–∂–µ. –£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–Ω–∞–Ω–∏–µ–º. –ú–æ–ª—á–∏—Ç –∏ –Ω–∞–±–ª—é–¥–∞–µ—Ç.";
    case "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": return "–°—Ç–∞–±–∏–ª—å–Ω—ã–π, –≤—ã–Ω–æ—Å–ª–∏–≤—ã–π, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π. –î–µ–ª–∞–µ—Ç –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —à—É–º–∞.";
    default: return "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –≤–Ω–µ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤.";
  }
}

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
window.addEventListener("DOMContentLoaded", () => {
  getRule();
  loadTasks();
  loadPeople();
  loadReminders();
});